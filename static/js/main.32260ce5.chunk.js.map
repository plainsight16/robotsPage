{"version":3,"sources":["reducers.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["intialSearchstate","searchField","intialRobotstate","isPending","robots","error","Card","name","email","id","className","alt","src","Cardlist","items","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","info","this","setState","children","Component","Scroll","style","overflowY","border","height","App","onRequestrobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.32260ce5.chunk.js","sourcesContent":["//import {setSearchField} from './actions';\r\nimport { \r\n\t  CHANGE_SEARCH_FIELD,\r\n\t  REQUEST_ROBOTS_PENDING,\r\n\t  REQUEST_ROBOTS_SUCCESS,\r\n\t  REQUEST_ROBOTS_FAILED\r\n    } from './constants.js';\r\n\r\nconst intialSearchstate ={\r\n\tsearchField:''\r\n};\r\n\r\nexport const searchRobots = ( state = intialSearchstate, action = {} ) => {\r\n\tswitch (action.type){\r\n\t\tcase  CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign ( {}, state, { searchField : action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\r\n\t}\r\n\r\n}\r\nconst intialRobotstate ={\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror:''\r\n};\r\n\r\nexport const requestRobots = ( state = intialRobotstate, action = {} ) =>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t    return Object.assign( {}, state, { isPending: true} );\r\n\t\tcase  REQUEST_ROBOTS_SUCCESS:\r\n\t\t    return Object.assign( {}, state, { robots: action.payload, isPending: false} );\r\n\t\tcase  REQUEST_ROBOTS_FAILED:\r\n\t\t    return Object.assign( {}, state, { isPending: true, error: action.payload} );\r\n\t\tdefault:\r\n\t\treturn state;          \r\n\t}\r\n\r\n}","import React from 'react';\r\nconst Card =({name, email,id})=>{ \r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 '>\r\n\t\t<img alt='robo' src={`https://robohash.org/${ id }? 200 x 200`}/>\r\n\t\t<div>\r\n\t\t<h2> {name}</h2>\r\n\t\t<p>{ email }</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from'./Card'\r\n//import { robots } from './robos'\r\n\r\nconst Cardlist=({robots})=>{\r\nlet items;\r\n\r\nif ( robots ){\r\n\titems=robots.map((user,i)=>{\r\n\t\t\t\treturn(\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t key={robots[i].id} \r\n\t\t\t\t\t id= {robots[i].id}\r\n\t\t\t\t\t name={robots[i].name}\r\n\t\t\t\t\t email={robots[i].email}\r\n\t\t\t\t />\r\n\t\t\t);\r\n\t\t}\r\n\t)\r\n}\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\titems\r\n\t\t}\t\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n const SearchBox=({searchChange})=>{\r\n \treturn(\r\n \t\t<div className=\"pa2\">\r\n \t\t<input className=\"pa3 ba b--green bg-lightest-blue\"\r\n \t\t       type=\"search\"\r\n \t\t       placeholder=\"search robots\"\r\n \t\t       onChange={searchChange}\r\n\r\n \t\t/>\r\n \t\t</div>\r\n \t);\r\n \t\r\n }\r\n export default SearchBox;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error,info){\r\n\treturn\tthis.setState({hasError:true});\r\n\t}\r\n\r\n\trender(){\r\n\t\treturn( this.state.hasError ? \r\n\t\t\t<h1> oops, Don't look at me, I'm only rendering</h1>\r\n\t\t\t:\r\n\t\t\tthis.props.children\r\n\t\t);\t\r\n\t}\r\n}\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border:'1px solid black ' , height:'800px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\nexport default Scroll;","import React , { Component } from \"react\"\r\nimport Cardlist from'../components/Cardlist';\r\nimport SearchBox from'../components/SearchBox';\r\nimport ErrorBoundary from'../components/ErrorBoundary';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport  { searchRobots, requestRobots } from '../reducers.js';\r\nimport { setSearchField, setRequestrobots } from '../actions.js';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) =>\r\n\t\t\tdispatch( setSearchField ( event.target.value ) ),\r\n\t\tonRequestrobots: () =>\r\n\t\t\tdispatch( setRequestrobots() )\r\n\t}\r\n}\r\nclass  App extends Component{\r\ncomponentDidMount(){\r\n\tthis.props.onRequestrobots();\r\n}\r\nrender(){\r\n\t\tconst {searchField, onSearchChange, robots, isPending, error}=this.props;\r\n\t\tconst filteredRobots=robots.filter(robot=>{ return(\r\n\t\t\trobot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t\t);\r\n\t\t});\r\n\t\treturn(\r\n\t\t\tisPending ?\r\n\t\t\t<h1> Loading</h1>\r\n\t\t\t:\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t<h1 className=\"f1\"> Robo Friends</h1>\r\n\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t <ErrorBoundary>\r\n\t\t\t      <Cardlist robots= {filteredRobots}/>\r\n\t\t\t </ErrorBoundary>\r\n\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\t\t\r\n}\r\nexport default connect( mapStateToProps , mapDispatchToProps )( App );","import { \r\n\t  CHANGE_SEARCH_FIELD,\r\n\t  REQUEST_ROBOTS_PENDING,\r\n\t  REQUEST_ROBOTS_SUCCESS,\r\n\t  REQUEST_ROBOTS_FAILED\r\n    } from './constants.js';\r\nexport const setSearchField = (text) => ({\r\n\ttype : CHANGE_SEARCH_FIELD,\r\n\tpayload : text\r\n})\r\nexport const setRequestrobots = () => (dispatch) =>{\r\n\tdispatch( { type : REQUEST_ROBOTS_PENDING} );\r\n\tfetch('http://jsonplaceholder.typicode.com/users')\r\n\t.then( response=> response.json())\r\n\t.then( data => dispatch( { type: REQUEST_ROBOTS_SUCCESS, payload: data } ))\r\n\t.catch( error => dispatch( { type: REQUEST_ROBOTS_FAILED, payload: error } ));\r\n\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'; \r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider , connect } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers.js';\nimport './index.css';\nimport App from'./containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots }); \nconst logger = createLogger();\nconst store = createStore( rootReducer, applyMiddleware(thunkMiddleware, logger) );\nReactDOM.render(\n <div>\n      <Provider store={store}>\n           <App/>\n     </Provider>\n </div>\n\n ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}